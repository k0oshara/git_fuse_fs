#!/bin/bash

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}================================${NC}"
}

print_success() {
    echo -e "${GREEN}‚úì $1${NC}"
}

print_error() {
    echo -e "${RED}‚úó $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö† $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚Ñπ $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    
    local deps_ok=true
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞
    if command -v gcc >/dev/null 2>&1; then
        print_success "GCC –Ω–∞–π–¥–µ–Ω: $(gcc --version | head -n1)"
    else
        print_error "GCC –Ω–µ –Ω–∞–π–¥–µ–Ω"
        deps_ok=false
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ pkg-config
    if command -v pkg-config >/dev/null 2>&1; then
        print_success "pkg-config –Ω–∞–π–¥–µ–Ω"
    else
        print_error "pkg-config –Ω–µ –Ω–∞–π–¥–µ–Ω"
        deps_ok=false
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ FUSE
    if pkg-config --exists fuse3; then
        print_success "FUSE3 –Ω–∞–π–¥–µ–Ω: $(pkg-config --modversion fuse3)"
    elif pkg-config --exists fuse; then
        print_success "FUSE –Ω–∞–π–¥–µ–Ω: $(pkg-config --modversion fuse)"
    else
        print_error "FUSE –Ω–µ –Ω–∞–π–¥–µ–Ω"
        deps_ok=false
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ libgit2
    if pkg-config --exists libgit2; then
        print_success "libgit2 –Ω–∞–π–¥–µ–Ω: $(pkg-config --modversion libgit2)"
    else
        print_error "libgit2 –Ω–µ –Ω–∞–π–¥–µ–Ω"
        deps_ok=false
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ FUSE —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    if [ -e /dev/fuse ]; then
        print_success "/dev/fuse –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        print_error "/dev/fuse –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        deps_ok=false
    fi
    
    if [ "$deps_ok" = false ]; then
        print_error "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º."
        exit 1
    fi
    
    echo
}

# –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–±–æ—Ä–æ–∫
cleanup() {
    print_header "–û—á–∏—Å—Ç–∫–∞"
    
    make clean >/dev/null 2>&1 || true
    rm -rf test-repo test-mount test-mount-* >/dev/null 2>&1 || true
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    for mount in test-mount test-mount-*; do
        if mountpoint -q "$mount" 2>/dev/null; then
            print_info "–†–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ $mount"
            fusermount3 -u "$mount" 2>/dev/null || fusermount -u "$mount" 2>/dev/null || umount "$mount" 2>/dev/null || true
        fi
    done
    
    print_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    echo
}

# –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
build() {
    print_header "–°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"
    
    if make; then
        print_success "–°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–∞"
    else
        print_error "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏"
        exit 1
    fi
    
    if [ -x "./gitfs" ]; then
        print_success "–ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª gitfs —Å–æ–∑–¥–∞–Ω"
    else
        print_error "–ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª gitfs –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi
    
    echo
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
check_formatting() {
    print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞"
    
    if command -v clang-format >/dev/null 2>&1; then
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        git stash push -m "temp stash for formatting check" >/dev/null 2>&1 || true
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        make lint >/dev/null 2>&1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if git diff --quiet 2>/dev/null; then
            print_success "–ö–æ–¥ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
        else
            print_warning "–ö–æ–¥ —Ç—Ä–µ–±—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'make lint'"
            git diff --name-only 2>/dev/null || true
        fi
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        git stash pop >/dev/null 2>&1 || true
    else
        print_warning "clang-format –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    fi
    
    echo
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
create_test_repo() {
    print_header "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
    
    rm -rf test-repo
    mkdir test-repo
    cd test-repo
    
    git init >/dev/null
    git config user.email "test@example.com"
    git config user.name "Test User"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    echo "Hello, GitFS!" > hello.txt
    echo "This is a test file with multiple lines." > multiline.txt
    echo "Line 2 of the test file." >> multiline.txt
    echo "Line 3 of the test file." >> multiline.txt
    
    mkdir -p subdir/nested
    echo "Nested file content" > subdir/nested.txt
    echo "Deeply nested content" > subdir/nested/deep.txt
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    printf '\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F' > binary.dat
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Ä—É—Å—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
    echo "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä! üåç" > unicode.txt
    
    git add . >/dev/null
    git commit -m "Initial test commit" >/dev/null
    
    cd ..
    
    print_success "–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω"
    echo
}

# –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
run_basic_tests() {
    print_header "–ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã"
    
    mkdir -p test-mount
    
    # –ó–∞–ø—É—Å–∫ GitFS –≤ —Ñ–æ–Ω–µ
    print_info "–ó–∞–ø—É—Å–∫ GitFS..."
    timeout 30s ./gitfs test-repo test-mount -f &
    local gitfs_pid=$!
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    local mounted=false
    for i in {1..30}; do
        if [ -f test-mount/hello.txt ] 2>/dev/null; then
            mounted=true
            break
        fi
        sleep 0.5
    done
    
    if [ "$mounted" = false ]; then
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å GitFS"
        kill $gitfs_pid 2>/dev/null || true
        return 1
    fi
    
    print_success "GitFS —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω"
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    if [ -f test-mount/hello.txt ]; then
        print_success "–¢–µ—Å—Ç 1: –§–∞–π–ª hello.txt —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    else
        print_error "–¢–µ—Å—Ç 1: –§–∞–π–ª hello.txt –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    # –¢–µ—Å—Ç 2: –ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
    local content=$(cat test-mount/hello.txt 2>/dev/null)
    if [ "$content" = "Hello, GitFS!" ]; then
        print_success "–¢–µ—Å—Ç 2: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    else
        print_error "–¢–µ—Å—Ç 2: –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞: '$content'"
    fi
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    if [ -d test-mount/subdir ]; then
        print_success "–¢–µ—Å—Ç 3: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è subdir —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    else
        print_error "–¢–µ—Å—Ç 3: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è subdir –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    fi
    
    # –¢–µ—Å—Ç 4: –í–ª–æ–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    if [ -f test-mount/subdir/nested.txt ]; then
        print_success "–¢–µ—Å—Ç 4: –í–ª–æ–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    else
        print_error "–¢–µ—Å—Ç 4: –í–ª–æ–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    # –¢–µ—Å—Ç 5: –ì–ª—É–±–æ–∫–æ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    if [ -f test-mount/subdir/nested/deep.txt ]; then
        print_success "–¢–µ—Å—Ç 5: –ì–ª—É–±–æ–∫–æ –≤–ª–æ–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    else
        print_error "–¢–µ—Å—Ç 5: –ì–ª—É–±–æ–∫–æ –≤–ª–æ–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    # –¢–µ—Å—Ç 6: –ë–∏–Ω–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã
    if [ -f test-mount/binary.dat ]; then
        local size=$(stat -c%s test-mount/binary.dat 2>/dev/null)
        if [ "$size" = "16" ]; then
            print_success "–¢–µ—Å—Ç 6: –ë–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
        else
            print_error "–¢–µ—Å—Ç 6: –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: $size"
        fi
    else
        print_error "–¢–µ—Å—Ç 6: –ë–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    # –¢–µ—Å—Ç 7: Unicode —Ñ–∞–π–ª—ã
    if [ -f test-mount/unicode.txt ]; then
        print_success "–¢–µ—Å—Ç 7: Unicode —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    else
        print_error "–¢–µ—Å—Ç 7: Unicode —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    # –¢–µ—Å—Ç 8: –õ–∏—Å—Ç–∏–Ω–≥ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    local file_count=$(ls test-mount/ 2>/dev/null | wc -l)
    if [ "$file_count" -ge "5" ]; then
        print_success "–¢–µ—Å—Ç 8: –õ–∏—Å—Ç–∏–Ω–≥ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç ($file_count —Ñ–∞–π–ª–æ–≤)"
    else
        print_error "–¢–µ—Å—Ç 8: –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –≤ –ª–∏—Å—Ç–∏–Ω–≥–µ: $file_count"
    fi
    
    # –¢–µ—Å—Ç 9: –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)
    if touch test-mount/newfile.txt 2>/dev/null; then
        print_error "–¢–µ—Å—Ç 9: –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞—â–∏—â–µ–Ω–∞ –æ—Ç –∑–∞–ø–∏—Å–∏"
        rm -f test-mount/newfile.txt 2>/dev/null || true
    else
        print_success "–¢–µ—Å—Ç 9: –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—â–µ–Ω–∞ –æ—Ç –∑–∞–ø–∏—Å–∏"
    fi
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ GitFS
    kill $gitfs_pid 2>/dev/null || true
    wait $gitfs_pid 2>/dev/null || true
    
    # –†–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    fusermount3 -u test-mount 2>/dev/null || fusermount -u test-mount 2>/dev/null || umount test-mount 2>/dev/null || true
    sleep 1
    
    print_success "–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
    echo
}

# –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤
run_automated_tests() {
    print_header "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã"
    
    if make test; then
        print_success "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ"
    else
        print_error "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π"
        return 1
    fi
    
    echo
}

# –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
run_performance_tests() {
    print_header "–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
    rm -rf big-test-repo
    mkdir big-test-repo
    cd big-test-repo
    
    git init >/dev/null
    git config user.email "test@example.com"
    git config user.name "Test User"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–æ–≤
    for i in {1..100}; do
        echo "File $i content with some text to make it non-empty" > "file_$i.txt"
    done
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    for i in {1..10}; do
        mkdir -p "dir_$i/subdir_$i"
        for j in {1..10}; do
            echo "Nested file $i-$j" > "dir_$i/subdir_$i/nested_$j.txt"
        done
    done
    
    git add . >/dev/null
    git commit -m "Big repo commit" >/dev/null
    cd ..
    
    mkdir -p big-test-mount
    
    # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."
    local start_time=$(date +%s.%N)
    
    timeout 60s ./gitfs big-test-repo big-test-mount -f &
    local gitfs_pid=$!
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    local mounted=false
    for i in {1..60}; do
        if [ -f big-test-mount/file_1.txt ] 2>/dev/null; then
            mounted=true
            break
        fi
        sleep 0.5
    done
    
    local end_time=$(date +%s.%N)
    local mount_time=$(echo "$end_time - $start_time" | bc -l 2>/dev/null || echo "N/A")
    
    if [ "$mounted" = true ]; then
        print_success "–ë–æ–ª—å—à–æ–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –∑–∞ ${mount_time}s"
        
        # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ª–∏—Å—Ç–∏–Ω–≥–∞
        print_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ª–∏—Å—Ç–∏–Ω–≥–∞..."
        local start_time=$(date +%s.%N)
        local file_count=$(ls big-test-mount/ 2>/dev/null | wc -l)
        local end_time=$(date +%s.%N)
        local list_time=$(echo "$end_time - $start_time" | bc -l 2>/dev/null || echo "N/A")
        
        print_success "–õ–∏—Å—Ç–∏–Ω–≥ $file_count —Ñ–∞–π–ª–æ–≤ –∑–∞ ${list_time}s"
        
        # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —á—Ç–µ–Ω–∏—è
        print_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —á—Ç–µ–Ω–∏—è..."
        local start_time=$(date +%s.%N)
        for i in {1..10}; do
            cat big-test-mount/file_$i.txt >/dev/null 2>&1
        done
        local end_time=$(date +%s.%N)
        local read_time=$(echo "$end_time - $start_time" | bc -l 2>/dev/null || echo "N/A")
        
        print_success "–ß—Ç–µ–Ω–∏–µ 10 —Ñ–∞–π–ª–æ–≤ –∑–∞ ${read_time}s"
    else
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å—à–æ–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
    fi
    
    # –û—á–∏—Å—Ç–∫–∞
    kill $gitfs_pid 2>/dev/null || true
    wait $gitfs_pid 2>/dev/null || true
    fusermount3 -u big-test-mount 2>/dev/null || fusermount -u big-test-mount 2>/dev/null || umount big-test-mount 2>/dev/null || true
    rm -rf big-test-repo big-test-mount
    
    echo
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
check_memory_leaks() {
    print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏"
    
    if ! command -v valgrind >/dev/null 2>&1; then
        print_warning "Valgrind –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏"
        echo
        return
    fi
    
    mkdir -p test-mount-valgrind
    
    print_info "–ó–∞–ø—É—Å–∫ GitFS –ø–æ–¥ Valgrind..."
    timeout 20s valgrind --leak-check=full --error-exitcode=1 --quiet \
        ./gitfs test-repo test-mount-valgrind -f &
    local valgrind_pid=$!
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    sleep 3
    
    # –ü—Ä–æ—Å—Ç—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    ls test-mount-valgrind/ >/dev/null 2>&1 || true
    cat test-mount-valgrind/hello.txt >/dev/null 2>&1 || true
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    kill $valgrind_pid 2>/dev/null || true
    
    if wait $valgrind_pid 2>/dev/null; then
        print_success "–£—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã"
    else
        local exit_code=$?
        if [ $exit_code -eq 1 ]; then
            print_error "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏"
        else
            print_warning "Valgrind –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º $exit_code"
        fi
    fi
    
    fusermount3 -u test-mount-valgrind 2>/dev/null || fusermount -u test-mount-valgrind 2>/dev/null || umount test-mount-valgrind 2>/dev/null || true
    rm -rf test-mount-valgrind
    
    echo
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    print_header "GitFS Test Suite"
    echo "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GitFS"
    echo
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    local run_all=true
    local run_basic=false
    local run_auto=false
    local run_perf=false
    local run_memory=false
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            --basic)
                run_all=false
                run_basic=true
                shift
                ;;
            --auto)
                run_all=false
                run_auto=true
                shift
                ;;
            --performance)
                run_all=false
                run_perf=true
                shift
                ;;
            --memory)
                run_all=false
                run_memory=true
                shift
                ;;
            --help)
                echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏–∏]"
                echo "–û–ø—Ü–∏–∏:"
                echo "  --basic       –¢–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã"
                echo "  --auto        –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã"
                echo "  --performance –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
                echo "  --memory      –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏"
                echo "  --help        –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
                echo
                echo "–ë–µ–∑ –æ–ø—Ü–∏–π –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –≤—Å–µ —Ç–µ—Å—Ç—ã"
                exit 0
                ;;
            *)
                print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
                exit 1
                ;;
        esac
    done
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
    check_dependencies
    cleanup
    build
    check_formatting
    create_test_repo
    
    local tests_failed=0
    
    if [ "$run_all" = true ] || [ "$run_basic" = true ]; then
        if ! run_basic_tests; then
            tests_failed=$((tests_failed + 1))
        fi
    fi
    
    if [ "$run_all" = true ] || [ "$run_auto" = true ]; then
        if ! run_automated_tests; then
            tests_failed=$((tests_failed + 1))
        fi
    fi
    
    if [ "$run_all" = true ] || [ "$run_perf" = true ]; then
        if ! run_performance_tests; then
            tests_failed=$((tests_failed + 1))
        fi
    fi
    
    if [ "$run_all" = true ] || [ "$run_memory" = true ]; then
        check_memory_leaks
    fi
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    cleanup
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print_header "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    
    if [ $tests_failed -eq 0 ]; then
        print_success "–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! üéâ"
        exit 0
    else
        print_error "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π ($tests_failed)"
        exit 1
    fi
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
